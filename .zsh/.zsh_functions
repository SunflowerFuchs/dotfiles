#!/usr/bin/env zsh

# function to create a local backup of files
bu() { cp $@ $@.backup-`date +%Y%m%d`; }

# pretty-print csv files
function pretty_csv {
    column -t -s, -n "$@" | less -F -S -X -K
}

# pretty-print tsv files
function pretty_tsv {
    column -t -s $'\t' -n "$@" | less -F -S -X -K
}

# add alias for unzip to always unzip into separate directory
function unzip {
    # test if file was given
    [[ $# -lt 1 ]] && echo "" && return

    for f in $@; do
        # check if the file ends in .zip, and if not, copy it and add _extracted.zip
        renamed=false
        if [ "${f}" = "${f%.zip}" ]; then
            cp "${f}" "${f}_extracted.zip"
            f="${f}_extracted.zip"
            renamed=true
        fi

        list=$(/usr/bin/zipinfo -1 $1)

        # check if file contains single file, then we can just unzip as is
        filecount=$(echo "${list}" | wc -l)
        if [[ ${filecount} -eq 1 ]]; then
            /usr/bin/unzip "${f}"
            continue
        fi

        # check if everything in the file is already in a subfolder, then we can just unzip as is
        folder=$(echo "${list}" | head -1)
        notInFolder=$(echo "${list}" | grep -ve "^${folder}" | wc -l)
        if [[ ${notInFolder} -eq 0 ]]; then
            /usr/bin/unzip "${f}"
            continue
        fi

        # in any other case we unzip into a subfolder
        # pattern matching to remove .zip at the end
        /usr/bin/unzip "${f}" -d "${f%.zip}"

        if $renamed; then
            rm ${f}
        fi
    done
}

# reset git repo to last commit
function gr {
    read "choice?Reset repo? [Y/n] "
    choice=${choice:l} #tolower
    case "$choice" in
      y|yes ) git reset --hard HEAD;;
      * ) return;;
    esac
}

function getNginxDomains {
    grep 'server_name' --dereference-recursive --no-filename /etc/nginx/sites-enabled/ \
        | ag 'server_name( [a-zA-Z0-9\.\*]+)+' \
        | ag --invert-match '^\s*#' \
        | perl -0p -e 's/(?:server_name )(.+)(?:;)/$1/g' \
        | tr ' ' '\n' \
        | tr -d '\t ' \
        | awk '{print $0"\nlocalhost"}' \
        | sort \
        | uniq \
        | ag '^[A-Za-z0-9\.\*]+$' \
        | tr '\n' ' '
}

# call mkcert with each domain name set in nginx/sites-enabled/
function mkcert-quick {
    mkcert \
        -cert-file ~/Documents/certificates/local/my.dev.lamapoll.pem \
        -key-file ~/Documents/certificates/local/my.dev.lamapoll-key.pem \
        $(getNginxDomains)

    # additionally, create a PKCS12 certificate file
    openssl pkcs12 \
        -export \
        -in ~/Documents/certificates/local/my.dev.lamapoll.pem \
        -out ~/Documents/certificates/local/my.dev.lamapoll.p12 \
        -inkey ~/Documents/certificates/local/my.dev.lamapoll-key.pem \
        -passout pass:Passw0rd!

    sudo service nginx reload
}

# decode a jwt token
function jwtd {
    local input=""
    if [ $# -ne 0 ]; then
        input=$(echo "$*")
    elif [ -p /dev/stdin ]; then
        input=$(cat /dev/stdin)
    else
        echo "No input given" >&2
        return 1
    fi

    jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${input}"
}

# show the weather
function wttr {
    local request="wttr.in/${1-$WTTR_LOCATION}?${2-m}"
    [ "$COLUMNS" -lt 125 ] && request+='&n'
    curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

# load additional function files
if [[ -n $(ls -A $ZDOTDIR/.zsh_functions.d/ 2>/dev/null) ]];then
    for f in $ZDOTDIR/.zsh_functions.d/*; do
        source "$f"
    done
fi
